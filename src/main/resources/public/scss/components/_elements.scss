/* _elements.scss
 *
 * 파일 경로 : components/_elements.scss
 * @description HTML element 디자인
 * @author wdj
 * @version 1.0
 */

// 기본 글꼴 설정.
// 모바일 기기 회전시에 사용자가 확대하지 않아도 글씨 크기가 재조정되는 것을 예방.
body {
  font-family: $font-family;
  font-size: $font-size-xs;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

// headings
h1, h2, h3, h4, h5, h6 {
  color: $neutral800;
  font-family: $font-family;
  font-weight: $font-weight-medium;
  line-height: 1.2;
}

h1 {
  color: $neutral800;
  font-size: $font-size-xl; // 32px;
  font-weight: $font-weight-bold;
}
h2 { font-size: $font-size-xl; }
h3 { font-size: $font-size-l; }
h4 { font-size: $font-size-m; }
h5 { font-size: $font-size-s; }
h6 {
  color: $neutral600;
  font-size: $font-size-xs; // 14px;
  font-weight: $font-weight-medium;
}
// a
a {
  cursor: pointer;
  &:link, &:visited, &:hover, &:active {
    color: $neutral800;
    text-decoration: none;
  }
}

// table
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; // 테이블 요소 사이의 간격을 제거
  table-layout: fixed;
  line-height: 1.5;

  td, th {
    @include ellipsis(table-cell);
    vertical-align: middle;
  }
}
.z-table {
  border: none;
  background-color: transparent;
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;

  td, th {
    &:not(.p-0) {
      padding: 0 0.9375rem;   // 0 15px
      &:first-child { padding-left: 1.25rem; } // 20px
    }
    a { color: $neutral800; }
  }

  th {
    color: $neutral600;
    font-family: $font-family;
    font-size: $font-size-xs;
    font-weight: $font-weight-medium;
  }

  .z-table-head {
    @include border(calc(0.0625rem * 2), solid, $gray400, bottom);
    tr { height: 2.5rem; } // 42px
  }

  .z-table-body {
    width: 100%;
    height: 100%;
    tr {
      height: 2.5625rem; // 41px
      // 마우스 오버시 배경 색상
      &:hover { background-color: $neutral200; }
      // 선택된 경우
      &.active {
        background-color: $blue100;
        td { color: $blue700; }
      }
    }
    // 데이터 없을때
    .no-data-found-list { pointer-events: none; }

    // icon button
    .button-icon {
      padding: 0;
      background-color: transparent;
      border-color: transparent;
      &:hover, &:focus, &:active, &:disabled {
        background-color: transparent;
        border-color: transparent;
      }
      .icon { background-color: $gray600; }
      &:hover .icon { background-color: $gray400; }
      &:focus .icon { background-color: $gray800; }
      &:active .icon { background-color: $gray800; }
      &:disabled .icon { background-color: $gray300; }
    }
  }
}
.z-option-table {
  border: none;
  background-color: transparent;
  color: $gray400;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;

  tr {
    @include border(0.0625rem, solid, $gray400, bottom);
    height: 2.5rem; // 40px
    border-left: none;
    border-right: none;
    th, td { padding: 0 0.5rem; }

    &.z-option-table-header {
      @include border(0.0625rem, solid, $gray400, top);
      @include border(calc(0.0625rem * 2), solid, $gray400, bottom);
      height: 2rem; // 32px
      background-color: $neutral100;
      color: $gray400;
      font-family: $font-family;
      font-size: $font-size-xs;
      font-weight: $font-weight-medium;
    }

    &.z-option-table-row {
      .z-checkbox,
      .z-radio { margin: 0 0 0 0.75rem; } // 12px

      .z-input {
        width: 85%;
        padding: 0.75rem;
        margin: 0.25rem; // 4px
        // 입력된 값이 있으면
        &:not(:placeholder-shown):not(:focus) { border-color: transparent; }
      }

      .button-icon {
        .icon {
          display: block;
          margin: 0 auto;
          background: $gray400;
          pointer-events: none;
        }
        &:hover .icon { background: $blue500; }
      }
    }
  }
}



// span
span {
  margin: auto 0;
  font-family: inherit;
}
// label
label {
  color: $neutral600;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
}
// input box + button
.input-button {
  @include relative();

  input[type='text'] {
    margin: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    &:focus, &:hover { z-index: 25; }
  }
  button {
    margin-left: -0.0625rem;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
    &:focus, &:hover, &:active { z-index: 25; }
  }
}

//////////////////////////  UI 컴포넌트 추가  //////////////////////////
input, textarea, select {
  &:focus, &:hover { outline: 0; }
}
.z-input {
  @include border(0.0625rem, solid, $gray400, all);
  @include borderRadius(0.125rem); // 2px
  height: 2.125rem; // 34px
  padding: 0 0.75rem; // 들여쓰기
  background-color: $white;
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.2;
  vertical-align: middle;

  &::placeholder { color: $gray400; }

  //readonly와 disabled일 때 placeholder감추기
  &:read-only::placeholder,
  &:disabled::placeholder { color: transparent; }

  &:not(:disabled),
  &:not(:read-only) {
    &:hover {
      @include border(0.0625rem, solid, $blue400, all);
      outline: 0;
    }

    &:focus {
      @include border(0.0625rem, solid, $blue600, all);
      @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
      outline: 0;

      &[data-error] {
        @include border(0.0625rem, solid, $red500, all);
        @include boxShadow(0, 0, 0, 0, $white);
      }
      &[data-success] {
        @include border(0.0625rem, solid, $green500, all);
        @include boxShadow(0, 0, 0, 0, $white);
      }
    }

    &:active {
      @include border(0.0625rem, solid, $blue600, all);
      outline: 0;
    }
  }

  &:read-only:not(:disabled):not(.tagify) {
    @include borderRadius(0);
    width: 100%;
    border: none;
    background-color: transparent;
    background-image: none;
    cursor: default;
    @include border(0.0625rem, solid, $gray300, bottom);

    &:hover, &:focus {
      @include border(0.0625rem, solid, $gray300, bottom);
      @include resetBoxShadow();
    }
  }

  &:disabled {
    @include border(0.0625rem, solid, $gray300, all);
    background-color: $neutral200;
    color: $gray400;
    pointer-events: none;
    cursor: default;
  }

  &.error { @include border(0.0625rem, solid, $red500 !important, all); }
  &.success { @include border(0.0625rem, solid, $green500 !important, all); }

  &-button {
    @include relative();
    height: 2.125rem; // 34px

    .z-input { flex-basis: 100%; }

    .button-search {
      @include borderRadius(0.25rem);
      margin-left: 1rem; // 16px
      &:focus, &:hover, &:active { z-index: 25; }
    }

    .button-icon-sm {
      position: relative;
      margin-top: 0.625rem; // 10px
      -webkit-print-color-adjust:exact;
      &::before {
        @include absolute($bottom: -0.5rem); //8px
        @include border(0.0625rem, solid, $gray300, bottom);
        content: '';
        width: 100%;
        height: 1px;
      }

      // 편집 불가 상태일 경우, 버튼을 숨김
      &:disabled {
        visibility: hidden;
      }
    }
  }

  // input type=number 증감 화살표 숨기기
  /* Chrome, Safari, Edge */
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    margin: 0;
    -webkit-appearance: none;
  }
  /* Firefox */
  &[type=number] { -moz-appearance: textfield; }
}

// textarea
// overlay scroll로 인한 div와의 중복 디자인을 방지하기 위해
// outer div에 대해 예외 처리
.z-textarea {
  padding: 0.5rem 0.75rem; // 들여쓰기 8px 16px
  background-color: $white;
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.6;
  &:not(.os-textarea) {
    @include border(0.0625rem, solid, $gray400, all);
    @include borderRadius(0.125rem);
  }

  &::placeholder { color: $gray400; }

  //readonly와 disabled일 때 placeholder감추기
  &:read-only::placeholder,
  &:disabled::placeholder { color: transparent; }

  &:not(:disabled),
  &:not(:read-only) {
    &:focus {
      @include border(0.0625rem, solid, $blue600, all);
      @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
      outline: 0;
    }

    &:hover {
      @include border(0.0625rem, solid, $blue400, all);
      outline: 0;
    }

    &:active {
      @include border(0.0625rem, solid, $blue600, all);
      outline: 0;
    }
  }

  &:read-only:not(:disabled):not(.os-host-textarea) {
    @include borderRadius(0);
    border: none !important;
    background-color: transparent;
    cursor: default;
    resize: none;
    @include border(0.0625rem, solid, $gray300 !important, left);

    &:hover, &:focus {
      @include border(0.0625rem, solid, $gray300, all);
      @include resetBoxShadow();
    }
  }

  &:disabled {
    @include border(0.0625rem, solid, $gray300, all);
    background-color: $neutral200;
    color: $gray400;
    pointer-events: none;
    cursor: default;
  }

  &.error { @include border(0.0625rem, solid, $red500 !important, all); }
  &.success { @include border(0.0625rem, solid, $green500 !important, all); }
}
// os-div 작업
div.z-textarea-readonly { border-color: transparent !important; }

// switch
.z-switch {
  @include relative();
  height: 1.75rem; //26px
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.2;
  outline: none;

  .z-label {
    display: inline-block;
    height: 1.125rem; // 18px
    margin-left: 3rem; // 48px
    cursor: pointer;
  }

  input[type=checkbox] {
    display: none;
    // 스위치 버튼
    + span {
      @include absolute(0, 0, 0, 0);
      @include borderRadius(2.5rem); // 40px
      @include transition(.4s);
      width: 2.5rem; // 40px
      height: 1.25rem; // 20px
      margin: 0;
      background-color: $gray400;
      cursor: pointer;
      // 동그라미
      &::before {
        @include absolute($top: 0.1rem, $left: 0.125rem); // 2px
        @include borderRadius(50%);
        content: '';
        width: 1rem; // 16px
        height: 1rem; // 16px
        background-color: $white;
      }
      &::after {
        @include maskImage('#{$icon-folder-path}icon_clear.svg', 1.25rem, 1.25rem, no-repeat, center); // 20px 20px
        @include absolute($right: 0.125rem); // 2px
        content: '';
        background-color: $white;
        -webkit-mask-size: 1.5rem; // 24px
        mask-size: 1.5rem; // 24px
      }
    }
    &:checked {
      + span {
        background-color: $blue600;
        &::before { @include translate(1.25rem, 0); } // 20px 0
        &::after {
          left: 0;
          -webkit-mask-size: 1.125rem; // 18px
          mask-size: 1.125rem; // 18px
          -webkit-mask-image: url('#{$icon-folder-path}icon_check.svg');
          mask-image: url('#{$icon-folder-path}icon_check.svg');
        }
      }
    }
    &:disabled + span { background-color: $gray200; }
  }
}

// select
select {
  @include border(0.0625rem, solid, $gray400, all);
  @include borderRadius(0.0625rem);
  width: inherit;
  height: 2.125rem; // 34px
  padding: 0 0.75rem;
  background-color: $white;
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.2;
  vertical-align: middle;
  -moz-appearance: none; /* Firefox */
  -webkit-appearance: none; /* Safari and Chrome */
  appearance: none;
}
/**
 Designed select
   1) select 태그를 사용하면서 initDesignedSelectTag 함수를 호출하면 아래 디자인을 적용할 수 있음.
   2) z-select 클래스를 가진 div 로 select 태그를 감싸고 디자인된 div 를 제공
   3) 내부에는 2개의 영역으로 구성되며 아래와 같은 클래스명으로 구분된다.
     - z-select-box : select 태그를 대신해서 보여지는 부분
     - z-select-options : z-select-box 클릭 시 보여지는 option 리스트 부분
*/
.z-select {
  @include relative();
  display: inline-block;
  width: 100%;
  height: 2.125rem; // 34px
  vertical-align: middle;

  select.readonly { visibility: hidden; }

  // select 태그를 대신해서 보여지는 부분
  .z-select-box {
    @include absolute(0, 0, 0, 0);
    @include borderRadius(0.125rem); // 2px
    @include border(0.0625rem, solid, $gray400, all);
    @include ellipsis(block);
    align-items: center;
    width: 100%;
    padding: 0.5rem 1.75rem 0.5rem 0.75rem; // 8px 28px 8px 12px
    background-color: $white;
    color: $neutral800;
    font-family: $font-family;
    font-size: $font-size-xs;
    font-weight: $font-weight-medium;
    line-height: 1.2;
    cursor: pointer;

    &:not(.readonly) {
      &:hover {
        @include border(0.0625rem, solid, $blue400, all);
        outline: 0;
      }

      &:focus {
        @include border(0.0625rem, solid, $blue600, all);
        @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
        outline: 0;
      }

      &.active {
        @include border(0.0625rem, solid, $blue600, all);
        outline: 0;
        // 열렸을때 출력되는 화살표 아이콘
        .icon.i-arrow-right { @include rotate(-90); }
        + .z-select-options { display: block; }
      }

      // 닫혔을때 출력되는 화살표 아이콘
      .icon {
        pointer-events: none;
        &.i-arrow-right {
          @include absolute($right: 0.5rem); // 8px
          @include rotate(90);
          margin-top: -0.1875rem; //3px
          background: $gray500;
        }
      }
    }

    // readonly
    &.readonly {
      @include border(0.0625rem, solid, $gray300, bottom);
      @include borderRadius(0);
      border: none;
      background-color: transparent;
      cursor: default;
    }

    .z-select-box-label {
      height: auto;
      width: 100%;
      padding: 0;
      border: none !important;
      background-color: transparent;
      vertical-align: unset;
      pointer-events: none;

      &:hover, &:focus {
        @include resetBoxShadow();
        border: none;
      }
    }

    // disabled
    &.disabled-select {
      @include border(0.0625rem, solid, $gray300, all);
      background-color: $neutral200;
      color: $gray400;
      pointer-events: none;
      cursor: default;

      .z-select-box-label {
        background-color: $neutral200;
        color: $gray400;
      }
    }
  }

  // z-select-box 클릭 시 보여지는 option 리스트 부분
  .z-select-options {
    @include absolute(calc(100% + 0.25rem), 0, null, 0);  // 4px
    @include border(0.0625rem, solid, $gray400, all);
    @include borderRadius(0.125rem); // 2px
    @include boxShadow(0, 0, 0.125rem, 0, $gray300);
    overflow: auto;
    display: none;
    max-height: 25rem; // 400px
    margin: 0;
    padding: 0.25rem 0; // 4px
    background-color: $white;
    color: $neutral800;
    outline: 0;
    list-style: none;
    z-index: 5000;
    li {
      @include ellipsis(block);
      align-items: center;
      margin: 0 0.3125rem; // 5px
      padding: 0.5625rem 1.75rem 0.5625rem 0; // 9px 28px 9px 16px
      font-family: inherit;
      font-size: $font-size-xs;
      font-weight: $font-weight-medium;
      text-indent: 0.4375rem; // 7px
      line-height: 1.2;

      &:hover { background: $blue100; }

      &[rel='hide'] { display: none; }
    }
    .selected {
      color: $blue500;

      // 선택된 옵션에 표시되는 체크 아이콘
      &:after {
        @include absolute($right: 0.9375rem); // 15px
        @include backgroundImage($icon-folder-path + 'icon_select_check.svg', auto, no-repeat, center, center);
        content: '';
        width: 0.625rem; // 10px
        height: 0.438rem; // 7px
        padding-top: 0.9375rem; //15px
      }
    }
  }
}

// slider
.z-slider {
  min-height: 1.375rem; // 22px
  .z-range {
    @include borderRadius(0.25rem); // 4px
    width : 75%;
    max-width: 15rem; // 240px
    height: 0.375rem; // 6px
    padding: 0;
    background: linear-gradient(to right, var(--range-fill-color) 0%, var(--range-fill-color) var(--range-location), $neutral200 var(--range-location), $neutral200 100%);
    outline: 0;
    appearance: none;
    --range-fill-color: #{$blue500};
    --range-location: 100%;
    -webkit-appearance: none;

    &:disabled {
      background: linear-gradient(to right, var(--range-fill-color) 0%, var(--range-fill-color) var(--range-location), $neutral200 var(--range-location), $neutral200 100%);
      --range-fill-color: #{$gray300};
    }

    // Thumb (= round button)
    &::-webkit-slider-thumb {
      @include boxShadow(0, 0, 0.125rem, 0, $gray500); // 2px
      width: 1.125rem; // 18px
      height: 1.125rem; // 18px
      border: 0.0625rem solid $gray300;
      border-radius: 50%;
      background: $white;
      cursor: pointer;
      -webkit-appearance: none;
      appearance: none;
      &:hover {
        border-color: $blue400;
        background-color: $blue100;
      }
      &:focus {
        @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
        border-color: $blue600;
      }
      &:active {
        border-color: $blue500;
        background-color: $blue200;
      }
      &:disabled {
        border-color: $gray300;
        background-color: $neutral200;
      }
    }

    // firefox
    &::-moz-range-thumb { // 동그라미
      @include boxShadow(0, 0, 0.125rem, 0, $gray500); // 2px
      width: 1.125rem; // 18px
      height: 1.125rem; // 18px
      border: 0.0625rem solid $gray300;
      border-radius: 50%;
      background: $white;
      cursor: pointer;
      &:hover {
        border-color: $blue400;
        background-color: $blue100;
      }
      &:focus {
        @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
        border-color: $blue600;
      }
      &:active {
        border-color: $blue500;
        background-color: $blue200;
      }
      &:disabled {
        border-color: $gray300;
        background-color: $neutral200;
      }
    }
  }
  .z-input {
    width: 23%;
    margin-left: 2%;
    text-align: center;
    &:read-only:not(:disabled) {
      @include border(0.0625rem, solid, $gray400, all);
      @include borderRadius(0.125rem); // 2px
      width: 23%;
    }
  }
}

// 스위치 목록
// ex) 권한, 역할, 사용자 정보 수정 > 체크박스 목록
.z-switch {
  display: inline-block;
  width: 100%;
  margin: 0 !important;
  .z-label-name { width: 12.5rem; } //200px
  // 목록
  &-list {
    height: 22.5rem; // 360px
    padding: 0.5rem 0.625rem; // 8px 10px
    .right { right: 0.25rem; } // 4px
    .padding { padding: 0.1875rem 0 0.1875rem 0; } // 3px
    .os-content { padding-top: 0 !important; }
    li {
      @include ellipsis(list-item);
      height: 2.5rem; // 40px
      padding-right: 0.2rem;
    }
    .z-switch {
      .z-label { margin-left: 0; }
      input[type=checkbox] + span { left: inherit }
    }
  }
}

// checkbox
.z-checkbox {
  margin-right: 0.5rem; // 8px
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.2;
  outline: none;
  > span:first-of-type { padding-right: 0.5rem; } //8px

  input[type=checkbox] {
    display: none;
    // 체크 박스 span
    + span {
      @include relative();
      &::before {
        @include border(0.0625rem, solid, $gray400, all);
        @include borderRadius(0.125rem); // 2px
        content: '';
        display: inline-block;
        width: 1.125rem; // 18px;
        height: 1.125rem; // 18px;
        margin-bottom: 0.125rem; // 2px
        background-color: $white;
        vertical-align: middle;
      }
    }
    &:checked {
      // 체크 기호
      + span::after {
        @include absolute($top: 0, $left: 0);
        @include border(0.125rem, solid, $blue500, bottom, top);
        @include border(0.125rem, solid, $blue500, left, right);
        @include borderRadius(0.125rem); // 2px
        @include transform(translate(0.1875rem, 0.25rem) rotate(-45deg)); // 3px, 4px
        content: '';
        width: 0.75rem; // 12px
        height: 0.375rem; // 6px
      }
    }

    &:not(:disabled),
    &:not(.readonly) {
      + span { cursor: pointer; }
      ~ .z-label { cursor: pointer; }

      &:hover {
        + span::before {
          border-color: $blue400;
          background-color: $blue100;
        }
      }
    }
    // 체크박스는 readonly 속성이 없기 때문에 readonly일 경우 disabled 디자인과 동일하게 처리
    &:disabled,
    &.readonly {
      + span {
        &::before { background-color: $neutral200; }
        &::after { border-color: $gray400; }
      }
      ~ .z-label { color: $gray400; }
    }

    &.error {
      + span::before { @include border(0.0625rem, solid, $red500 !important, all); }
    }
  }

  &:focus {
    input[type=checkbox]:not(:disabled),
    input[type=checkbox]:not(.readonly) {
      + span::before {
        @include boxShadow(0, 0, 0.0625rem, 0, $blue600);
        border-color: $blue600;
      }
    }
  }
  &:active {
    input[type=checkbox]:not(:disabled),
    input[type=checkbox]:not(.readonly) {
      + span {
        &::before {
          border-color: $blue600;
          background-color: $blue200;
        }
        &::after { border-color: $blue700; }
      }
    }
  }

  // readonly, disabled 클래스 설정시 라벨의 동작을 막음
  &.readonly, &.disabled { pointer-events: none; }
}
// 체크박스 목록
// ex) 권한, 역할, 사용자 정보 수정 > 체크박스 목록
.z-checkbox {
  // 전체 선택
  &-all { display: table-cell; }
  // 목록
  &-list {
    @include border(0.0625rem, solid, $gray400, all);
    @include borderRadius(0.0625rem); // 1px
    height: 13.5rem; // 216px
    padding: 0.5rem 0.625rem; // 8px 10px

    .right { right: 0.25rem; } // 4px
    .padding { padding: 0.1875rem 0 0.1875rem 0; } // 3px

    li {
      @include ellipsis(list-item);
      height: 1.5rem; // 24px
    }
  }
}

// radio button
.z-radio {
  @include relative();
  margin-right: 0.5rem; // 8px
  color: $neutral800;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-medium;
  line-height: 1.6;
  outline: none;

  > span:first-of-type { padding-right: 0.5rem; } //8px

  input[type=radio] {
    display: none;
    // ⓞ 로 사용될 span
    + span {
      @include relative();
      &::before { // 테두리로 사용되는 큰 원
        @include relative($top: -0.0625rem); // -1px
        @include border(0.0625rem, solid, $gray400, all);
        @include borderRadius(50%);
        content: '';
        display: inline-block;
        width: 1.125rem; // 18px;
        height: 1.125rem; // 18px;
        background-color: $white;
        text-align: center;
        vertical-align: middle;
      }

      &::after { // 선택시 작은 원
        @include absolute($top: -0.35rem, $left: 0); // top: -5.6 px
        @include borderRadius(50%);
        content: '';
        width: 0.625rem; // 10px;
        height: 0.625rem; // 10px;
        background-color: transparent;
      }
    }

    &:not(:disabled),
    &:not(.readonly) {
      + span { cursor: pointer; }
      ~ .z-label { cursor: pointer; }

      &:checked {
        + span {
          &::before { border-color: $gray400; }
          &::after {
            @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
            background-color: $blue500;
          }
        }
      }

      &:hover {
        + span::before {
          border-color: $blue400;
          background-color: $blue100;
        }
      }
    }
    // 라디오버튼은 readonly 속성이 없기 때문에 readonly일 경우 disabled 디자인과 동일하게 처리
    &:disabled,
    &.readonly {
      + span::before {
        border-color: $gray300;
        background-color: $neutral200;
      }
      ~ .z-label { color: $gray400; }
      &:checked {
        + span::after {
          @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
          background-color: $gray400;
        }
      }
    }

    &.error {
      + span::before { @include border(0.0625rem, solid, $red500 !important, all); }
    }
  }

  &:focus {
    input[type=radio]:not(:disabled),
    input[type=radio]:not(.readonly) {
      + span::before {
        @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
        border-color: $blue600;
      }
    }
  }
  &:active {
    input[type=radio]:not(:disabled),
    input[type=radio]:not(.readonly) {
      + span {
        &::before {
          border-color: $blue600;
          background-color: $blue200;
        }
        &::after {
          @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
          background-color: $blue700;
        }
      }
    }
  }

  // readonly, disabled 클래스 설정시 라벨의 동작을 막음
  &.readonly, &.disabled { pointer-events: none; }
}

.z-view-hover { pointer-events: none; }

// 기본 라벨 테마
$label-themes-default: (
        'normal': (
                'default': ('font': $blue700, 'background': $blue300, 'border': $blue300)
        )
);
// label default
.label {
  @include borderRadius(0.125rem); // 2px
  padding: 0.375rem; // 6px
  font-size: $font-size-xs;
  font-weight: $font-weight-bold;
  line-height: 1.0625rem; //17px
  // 기본 테마별 라벨
  @each $theme, $value in $label-themes-default {
    &.#{$theme} {
      border-color: map-get($value, 'default', 'border');
      background-color: map-get($value, 'default', 'background');
      color: map-get($value, 'default', 'font');
    }
  }

}

.z-divider { margin: 0; }
