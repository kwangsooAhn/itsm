/* _button.scss
 *
 * 적용 규칙
 * (1) 버튼 1개인 경우 : Secondary
 * (2) 버튼 2개인 경우 : Primary + Secondary 혹은 Primary + Extra (두번째 옵션의 중요도에 따라)
 * (3) 버튼 3개 이상인 경우 : Primary + (n * Secondary)
 * (4) 버튼 외에 폼 양식을 포함할 경우
 *  - (4-1) 제출 버튼 하나만 있을 경우 : Primary
 *  - (4-2) 제출 외의 옵션이 있는 경우: (2)번 혹은 (3)번과 동일
 * (5) 버튼 외에 클릭하는 옵션이 그 옵션을 클릭함으로써 버튼을 클릭하지 않아도 되는 (혹은 클릭하지 못하는) 상황이 되는 경우: Secondary (아마 이 경우에는 버튼이 하나 뿐일 겁니다.)
 *
 * 파일 경로 : components/_button.scss
 * @description 버튼 디자인
 * @author wdj
 * @version 1.0
 */
// light
$button-themes-default: (
        'primary': (
                'default': ('font': $white, 'background': $blue700, 'border' : $blue700),
                'hover': ('font' : $white, 'background': $blue600, 'border' : $blue600),
                'focus': ('font': $white, 'background': $blue700, 'border' : $blue700, 'shadow': 0 0 0 0.125rem $blue500),
                'active': ('font': $white, 'background': $blue800, 'border' : $blue800),
                'disabled': ('font': $gray400, 'background': $gray50, 'border' : $gray50)
        ),
        'secondary': (
                'default': ('font': $gray700, 'background': $gray200, 'border': $gray200),
                'hover': ('font' : $gray700, 'background': $gray100, 'border': $gray100),
                'focus': ('font': $gray700, 'background': $gray200, 'border': $blue500, 'shadow': 0 0 0 0.125rem $blue500),
                'active': ('font': $blue800, 'background': $blue300, 'border': $blue300),
                'disabled': ('font': $gray400, 'background': $gray50, 'border': $gray50)
        ),
        'danger': (
                'default': ('font': $white, 'background': $red500, 'border': $red500),
                'hover': ('font' : $white, 'background': $red400, 'border': $red400),
                'focus': ('font': $white, 'background': $red500, 'border': $red500, 'shadow': 0 0 0.125rem $red700),
                'active': ('font': $white, 'background': $red600, 'border': $red600),
                'disabled': ('font': $gray400, 'background': $gray50, 'border': $gray50)
        ),
        'warning': (
                'default': ('font': $blue800, 'background': $orange400, 'border': $orange400),
                'hover': ('font' : $blue800, 'background': $orange200, 'border': $orange200),
                'focus': ('font': $blue800, 'background': $orange400, 'border': $orange400, 'shadow': 0 0 0.125rem $orange600),
                'active': ('font': $blue800, 'background': $orange500, 'border': $orange500),
                'disabled': ('font': $gray400, 'background': $gray50, 'border': $gray50)
        ),
        'extra': (
                'default': ('font': $blue500, 'background': $white, 'border': $white),
                'hover': ('font' : $blue500, 'background': $blue100, 'border': $blue100),
                'focus': ('font': $blue500, 'background': $white, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $blue700, 'background': $blue200, 'border': $blue200),
                'disabled': ('font': $gray400, 'background': $neutral200, 'border': $neutral200)
        ),
        'tertiary': (
                'default': ('font': $neutral800, 'background': $neutral300, 'border': $neutral300),
                'hover': ('font' : $neutral800, 'background': $neutral200, 'border': $neutral200),
                'focus': ('font': $neutral800, 'background': $neutral300, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $neutral800, 'background': $neutral300, 'border': $neutral400),
                'disabled': ('font': $gray400, 'background': $neutral200, 'border': $neutral200)
        )
);
// dark
$button-themes-light: (
        'light-primary': (
                'default': ('font': $white, 'background': $blue500, 'border': $blue500),
                'hover': ('font' : $white, 'background': $blue400, 'border': $blue400),
                'focus': ('font': $white, 'background': $blue500, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $white, 'background': $blue600, 'border': $blue700),
                'disabled': ('font': $gray400, 'background': $neutral200, 'border': $neutral200)
        ),
        'light-secondary': (
                'default': ('font': $white, 'background': hexToRGBA($white, 0.2), 'border': $white),
                'hover': ('font' : $white, 'background': hexToRGBA($white, 0.1), 'border': $white),
                'focus': ('font': $white, 'background': hexToRGBA($white, 0.1), 'border': $white, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $white, 'background': hexToRGBA($white, 0.4), 'border': $white),
                'disabled': ('font': $gray400, ' background': $neutral200, 'border': $neutral200)
        ),
        'light-extra': (
                'default': ('font': $white, 'background': transparent, 'border': transparent),
                'hover': ('font' : $white, 'background': hexToRGBA($white, 0.2), 'border': hexToRGBA($white, 0.2)),
                'focus': ('font': $white, 'background': transparent, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $white, 'background': hexToRGBA($white, 0.4), 'border': hexToRGBA($white, 0.4)),
                'disabled': ('font': $gray400, 'background': $neutral200, 'border': $neutral200)
        ),
        'light-form': (
                'default': ('font': $neutral800, 'background': $neutral300, 'border': $neutral300),
                'hover': ('font' : $neutral800, 'background': $neutral200, 'border': $neutral200),
                'focus': ('font': $neutral800, 'background': $neutral300, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
                'active': ('font': $neutral800, 'background': $neutral300, 'border': $neutral400),
                'disabled': ('font': $gray400, 'background': $neutral200, 'border': $neutral200)
        )
);
// button group
// - button switch, button toggle
$button-group: (
        'default': ('font': $gray800, 'background': $white, 'border': $gray300),
        'hover': ('font' : $gray800, 'background': $blue100, 'border': $gray300),
        'focus': ('font': $gray800, 'background': $white, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
        'active': ('font': $blue700, 'background': $blue200, 'border': $blue400),
        'selected': ('font': $blue500, 'background': $white, 'border': $blue500),
        'disabled': ('font': $gray400, 'background': $neutral200, 'border': $gray300)
);

.btn {
  // 종류
  &__ic,
  &__text--box {
    @include border(0rem, solid, transparent, all);
    @include borderRadius(0.25rem); // 4px
    display: inline-block;
    overflow: visible;
    background-color: transparent;
    line-height: 1;
    vertical-align: middle;
    opacity: 1;
    user-select: none;
    white-space: nowrap;
    cursor: pointer;
    &:focus, &:hover { outline: 0; }
    &:disabled, &.disabled { cursor: default; }
  }
  &__text {
    &--box, &--only {
      font-size: 0.875rem;
      font-weight: $font-weight-semibold;
    }
    &--box { padding: 0.625rem 1.25rem; } // 10px 20px
    &--only {
      padding: 0;
      color: $gray600;
      line-height: 1.25rem; // 20px
      &:hover {
        @include underline;
        color: $gray400;
      }
      &:active, &:focus { color: $gray800; }
      &:disabled, &.disabled { color: $gray300; }
    }
  }
  &__ic {
    padding: 0.4375rem; // 7px (버튼 기본 너비 높이 : 34px 34px)
    line-height: 0;
  }
  
  // 크기
  &--xsmall {}
  &--small {
    font-size: $font-size-xxs;
    padding: 0.375rem 0.4375rem; // 6px 7px
  }
  &--medium {}
  &--large {}

  // 테마
  &__ic,
  &__text--box {
    // light
    @each $theme, $value in $button-themes-default {
      &.#{$theme} {
        background-color: map-get($value, 'default', 'background');
        color: map-get($value, 'default', 'font');
        @if map-get($value, 'default', 'border') != null {
          border-color: map-get($value, 'default', 'border');
        }
        @if map-get($value, 'default', 'shadow') != null {
          box-shadow: map-get($value, 'default', 'shadow');
        }
        // 아이콘이 존재한다면
        [class*="ic-"] {
          display: block;
          background: map-get($value, 'default', 'font');
          pointer-events: none;
        }

        &:focus {
          background-color: map-get($value, 'focus', 'background');
          color: map-get($value, 'focus', 'font');
          @if map-get($value, 'focus', 'border') != null {
            border-color: map-get($value, 'focus', 'border');
          };
          @if map-get($value, 'focus', 'shadow') != null {
            box-shadow: map-get($value, 'focus', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'focus', 'font'); }
        }

        &:hover {
          color: map-get($value, 'hover', 'font');
          background-color: map-get($value, 'hover', 'background');
          @if map-get($value, 'hover', 'border') != null {
            border-color: map-get($value, 'hover', 'border');
          };
          @if map-get($value, 'hover', 'shadow') != null {
            box-shadow: map-get($value, 'hover', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'hover', 'font'); }
        }

        &:enabled:active, &:enabled.active {
          background-color: map-get($value, 'active', 'background');
          color: map-get($value, 'active', 'font');
          @if map-get($value, 'active', 'border') != null {
            border-color: map-get($value, 'active', 'border');
          }
          @if map-get($value, 'active', 'shadow') != null {
            box-shadow: map-get($value, 'active', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'active', 'font'); }
        }

        &:disabled, &.disabled {
          color: map-get($value, 'disabled', 'font');
          background-color: map-get($value, 'disabled', 'background');
          @if map-get($value, 'disabled', 'border') != null {
            border-color: map-get($value, 'disabled', 'border');
          }
          @if map-get($value, 'disabled', 'shadow') != null {
            box-shadow: map-get($value, 'disabled', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'disabled', 'font'); }
        }
      }
    }
    // dark
    @each $theme, $value in $button-themes-light {
      &.#{$theme} {
        color: map-get($value, 'default', 'font');
        background-color: map-get($value, 'default', 'background');
        border-color: map-get($value, 'default', 'border');
        @if map-get($value, 'default', 'shadow') != null {
          box-shadow: map-get($value, 'default', 'shadow');
        }
        // 아이콘이 존재한다면
        [class*="ic-"] {
          display: inline-block;
          background: map-get($value, 'default', 'font');
          pointer-events: none;
        }

        &:focus {
          color: map-get($value, 'focus', 'font');
          background-color: map-get($value, 'focus', 'background');
          border-color: map-get($value, 'focus', 'border');
          @if map-get($value, 'focus', 'shadow') != null {
            box-shadow: map-get($value, 'focus', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'focus', 'font'); }
        }

        &:hover {
          color: map-get($value, 'hover', 'font');
          background-color: map-get($value, 'hover', 'background');
          border-color: map-get($value, 'hover', 'border');
          @if map-get($value, 'hover', 'shadow') != null {
            box-shadow: map-get($value, 'hover', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'hover', 'font'); }
        }

        &:enabled:active, &:enabled.active {
          color: map-get($value, 'active', 'font');
          background-color: map-get($value, 'active', 'background');
          border-color: map-get($value, 'active', 'border');
          @if map-get($value, 'active', 'shadow') != null {
            box-shadow: map-get($value, 'active', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'active', 'font'); }
        }

        &:disabled, &.disabled {
          color: map-get($value, 'disabled', 'font');
          background-color: map-get($value, 'disabled', 'background');
          border-color: map-get($value, 'disabled', 'border');
          @if map-get($value, 'disabled', 'shadow') != null {
            box-shadow: map-get($value, 'disabled', 'shadow');
          }
          [class*="ic-"] { background: map-get($value, 'disabled', 'font'); }
        }
      }
    }
  }
  
  // 버튼 목록
  &__list {
    display: inline-flex;
    position: relative;
    vertical-align: middle;
    .btn {
      &__ic,
      &__text--box {
        &:not(:last-child) { margin-right: 0.5rem; } // 8px
      }
    }
  }
}

// toggle
.btn__toggle {
  // 스위치
  // ex) 권한, 역할, 사용자 정보 수정 > 체크박스 목록
  &__switch {
    @include relative();
    display: inline-block;
    width: 100%;
    margin: 0 !important;
    height: 1.75rem; //26px
    color: $neutral800;
    line-height: 1.2;
    outline: none;
    &__label {
      display: inline-block;
      height: 1.125rem; // 18px
      margin-left: 3rem; // 48px
      cursor: pointer;
    }

    input[type=checkbox] {
      display: none;
      // 스위치 버튼
      + span {
        @include absolute(0, 0, 0, 0);
        @include borderRadius(2.5rem); // 40px
        @include transition(.4s);
        width: 2.5rem; // 40px
        height: 1.25rem; // 20px
        margin: 0;
        background-color: $gray400;
        cursor: pointer;

        // 동그라미
        &::before {
          @include absolute($top: 0.1rem, $left: 0.125rem); // 2px
          @include borderRadius(50%);
          content: '';
          width: 1rem; // 16px
          height: 1rem; // 16px
          background-color: $white;
        }
        &::after {
          @include maskImage('#{$icon-folder-path}icon_remove.svg', 1.25rem, 1.25rem, no-repeat, center); // 20px 20px
          @include absolute($right: 0.125rem); // 2px
          content: '';
          background-color: $white;
          -webkit-mask-size: 1.5rem; // 24px
          mask-size: 1.5rem; // 24px
        }
      }

      &:checked {
        + span {
          background-color: $blue600;
          &::before { @include translate(1.25rem, 0); } // 20px 0
          &::after {
            left: 0;
            -webkit-mask-size: 1.125rem; // 18px
            mask-size: 1.125rem; // 18px
            -webkit-mask-image: url('#{$icon-folder-path}icon_check.svg');
            mask-image: url('#{$icon-folder-path}icon_check.svg');
          }
        }
      }
      &:disabled + span { background-color: $gray200; }
    }

    // 목록
    // ex) 역할
    &__list {
      height: 22.5rem; // 360px
      padding: 0.5rem 0.625rem; // 8px 10px
      .right { right: 0.25rem; } // 4px
      .padding { padding: 0.1875rem 0 0.1875rem 0; } // 3px
      .os-content { padding-top: 0 !important; }

      li {
        @include ellipsis(list-item);
        height: 2.5rem; // 40px
        padding-right: 0.2rem;
      }

      .btn__toggle__switch {
        &__label { margin-left: 0; }
        input[type=checkbox] + span { left: inherit; }
      }
    }
  }

  // button group
  // (1) single : 버튼 그룹 중 하나의 버튼만 선택
  // (2) multi : 버튼 그룹 각 버튼 토글 가능
  &__button {
    display: inline-flex;
    flex-direction: row;
    vertical-align: middle;
    &--single,
    &--multi {
      @include border(0.0625rem, solid, map-get($button-group, 'default', 'border'), all);
      @include borderRadius(0.25rem); // 4px
      display: inline-block;
      overflow: visible;
      flex: 1 1 auto;
      padding: 0;
      background-color: map-get($button-group, 'default', 'background');
      color: map-get($button-group, 'default', 'font');
      font-family: $font-family;
      font-size: $font-size-xs;
      font-weight: $font-weight-semibold;
      text-align: center;
      text-decoration: none;
      vertical-align: middle;
      opacity: 1;
      user-select: none;
      white-space: nowrap;
      cursor: pointer;
      @if map-get($button-group, 'default', 'shadow') != null {
        box-shadow: map-get($button-group, 'default', 'shadow');
      }

      // 양 끝 테두리 둥글게
      &:not(:first-child) {
        margin-left: -0.0625rem;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
      }
      &:not(:last-of-type) {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
      }

    &:focus {
      border-color: map-get($button-group, 'focus', 'border');
      background-color: map-get($button-group, 'focus', 'background');
      color: map-get($button-group, 'focus', 'font');
      outline: 0;
      @if map-get($button-group, 'focus', 'shadow') != null {
        box-shadow: map-get($button-group, 'focus', 'shadow');
      }
      [class*="ic-"] { background: map-get($button-group, 'focus', 'font'); }
    }

    &:hover {
      border-color: map-get($button-group, 'hover', 'border');
      background-color: map-get($button-group, 'hover', 'background');
      color: map-get($button-group, 'hover', 'font');
      outline: 0;
      @if map-get($button-group, 'hover', 'shadow') != null {
        box-shadow: map-get($button-group, 'hover', 'shadow');
      }
      [class*="ic-"] { background: map-get($button-group, 'hover', 'font'); }
    }

    &:enabled:active, &:enabled.active {
      border-color: map-get($button-group, 'active', 'border');
      background-color: map-get($button-group, 'active', 'background');
      color: map-get($button-group, 'active', 'font');
      z-index: 25;
      @if map-get($button-group, 'active', 'shadow') != null {
        box-shadow: map-get($button-group, 'active', 'shadow');
      }
      [class*="ic-"] { background: map-get($button-group, 'active', 'font'); }
    }

    &:disabled, &.disabled {
      border-color: map-get($button-group, 'disabled', 'border');
      background-color: map-get($button-group, 'disabled', 'background');
      color: map-get($button-group, 'disabled', 'font');
      cursor: default;
      @if map-get($button-group, 'disabled', 'shadow') != null {
        box-shadow: map-get($button-group, 'disabled', 'shadow');
      }
      [class*="ic-"] { background: map-get($button-group, 'disabled', 'font'); }
    }
      
    // 선택된 경우
    &.selected:not(:disabled), &.selected:not(.disabled) {
      border-color: map-get($button-group, 'selected', 'border');
      background-color: map-get($button-group, 'selected', 'background');
      color: map-get($button-group, 'selected', 'font');
      z-index: 25;
      @if map-get($button-group, 'selected', 'shadow') != null {
        box-shadow: map-get($button-group, 'selected', 'shadow');
      }
      [class*="ic-"] { background: map-get($button-group, 'selected', 'font'); }
    }

    // 아이콘이 존재한다면
    [class*="ic-"] {
      display: inline-block;
      background: map-get($button-group, 'default', 'font');
      vertical-align: middle;
      pointer-events: none;
    }
  }

    // vertical button toggle group
    &.vertical {
      flex-direction: column;
      align-items: flex-start;
      justify-content: center;

      .btn__toggle__button--single,
      .btn__toggle__button--multi {
        @include borderRadius(0.25rem); // 4px
        flex: 0 1 auto;
        width: 100%;

        // Prevent double borders when buttons are next to each other
        &:not(:first-child) {
          margin-left: 0;
          margin-top: -0.0625rem;
          border-top-left-radius: 0;
          border-top-right-radius: 0;
        }
        &:not(:last-of-type) {
          border-bottom-left-radius: 0;
          border-bottom-right-radius: 0;
        }
      }
    }
  }
}

// 원문자 X버튼
.item-remove {
  @include borderRadius(50%);
  position: relative;
  margin-top: 0.625rem; // 10px
  margin-right: 1rem;
  width: 1rem;
  height: 1rem;
  padding: 0;
  border: none;
  background-color: $neutral300;
  cursor: pointer;
  -webkit-print-color-adjust:exact;
  &:hover { background-color: $neutral200; }
  [class*=ic-] {
    width: 0.5rem;
    height: 0.5rem;
    margin: 0.25rem;
    background-color: $neutral800;
  }
}