/* _elements.scss
 *
 * 파일 경로 : template/_elements.scss
 * @description HTML element 디자인
 * @author wdj
 * @version 1.0
 */

// 기본 글꼴 설정.
// 모바일 기기 회전시에 사용자가 확대하지 않아도 글씨 크기가 재조정되는 것을 예방.
body {
  font-family: $font-family;
  font-size: $font-size-s;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

// headings
h1, h2, h3, h4, h5, h6 {
  font-family: $font-family;
  font-weight: $headings-font-weight;
  line-height: $headings-line-height;
  color: $headings-font-color;
}

h1 {
  font-size: $h1-font-size;
  font-weight: $font-weight-bold;
}
h2 {
  font-size: $h2-font-size;
}
h3 {
  font-size: $h3-font-size;
}
h4 {
  font-size: $h4-font-size;
}
h5 {
  font-size: $h5-font-size;
}
h6 {
  font-family: $font-family;
  font-size: $h6-font-size;
}
// a
a { cursor: pointer; }
a:link,
a:visited,
a:hover,
a:active {
  text-decoration: none;
}

// table
table {
  width: 100%;
  table-layout: fixed;
  border-collapse: collapse;
  border-spacing: 0; // 테이블 요소 사이의 간격을 제거
  line-height: 1.5;

  td, th {
    @include ellipsis(table-cell);
    vertical-align: middle;
  }
}
.z-table {
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  color: $element-font-color;
  background-color: transparent;
  border: none;

  td, th {
    padding: 0 0.9375rem; // 0 15px
    &:first-child { padding-left: 1.25rem; } // 20px

    a { color: $element-font-color; }
  }

  th {
    font-family: $table-head-font-family;
    font-size: $table-head-font-size;
    font-weight: $table-head-font-weight;
    color: $table-head-font-color;
  }

  .z-table-head {
    @include border(calc(#{$element-border-width} * 2), solid, $element-border-color, bottom);
    tr { height: 2.5rem; } // 42px
  }

  .z-table-body {
    width: 100%;
    height: 100%;
    @include border($element-border-width, solid, $element-border-color, bottom);
    tr {
      height: 2.5625rem; // 41px

      // 마우스 오버시 배경 색상
      &:hover { background-color: $table-row-hover-bg-color; }

      // 선택된 경우
      &.active {
        background-color: $table-row-active-bg-color;
        td { color: $table-row-active-font-color; }
      }
    }
    // 데이터 없을때
    .no-data-found-list {
      pointer-events: none;
    }
  }
}
.z-option-table {
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  color: $option-table-font-color;
  background-color: transparent;
  border: none;

  tr {
    @include border($element-border-width, solid, $element-border-color, bottom);
    border-left: none;
    border-right: none;
    height: 2.5rem; // 40px

    th, td { padding: 0 0.5rem; }

    &.z-option-table-header {
      height: 2rem; // 32px
      font-family: $table-head-font-family;
      font-size: $table-head-font-size;
      font-weight: $table-head-font-weight;
      color: $option-table-header-font-color;
      @include border($element-border-width, solid, $element-border-color, top);
      @include border(calc(#{$element-border-width} * 2), solid, $element-border-color, bottom);
      background-color: $option-table-header-bg-color;
    }

    &.z-option-table-row {

      .z-checkbox, .z-radio { margin: 0 0 0 0.75rem; } // 12px

      .z-input {
        width: 85%;
        padding: 0.75rem;
        margin: 0.25rem; // 4px
        // 입력된 값이 있으면
        &:not(:placeholder-shown):not(:focus) {
          border-color: transparent;
        }
      }

      .z-button-icon {
        .z-icon {
          display: block;
          margin: 0 auto;
          background: $option-table-icon-color;
          pointer-events: none;
        }
        &:hover {
          .z-icon { background: $option-table-icon-hover-color; }
        }
      }
    }
  }
}

// span
span {
  font-family: inherit;
  margin: auto 0;
}
// label
label {
  font-family: $label-font-family;
  color: $label-font-color;
  font-size: $label-font-size;
  font-weight: $label-font-weight;
}
// input box + button
.input-button {
  @include relative();

  input[type='text'] {
    margin: 0;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;

    &:focus,
    &:hover {
      z-index: $z-index-event;
    }
  }
  button {
    margin-left: -0.0625rem;
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;

    &:focus,
    &:hover,
    &:active {
      z-index: $z-index-event;
    }
  }
}

/////////////////////////////////////////////////// UI 컴포넌트 추가  ////////////////////////////////////////////////////

// todo:
//  1. 추후 bz-colors.scss를 사용하여 variable 수정 필요.
//     참고를 위헤 이전 variables는 주석으로 남김.
//  2. z-element 모두 구성된 후에 _element.scss로 overwrite 할 것.

input, textarea, select {
  &:focus,
  &:hover { outline: 0; }
}
.z-input {
  height: 2.25rem; // 36px
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: $element-line-height;
  color: $element-font-color;
  background-color: $element-bg-color;
  @include border($element-border-width, solid, $element-border-color, all);
  @include borderRadius($element-border-radius); // 2px
  padding: 0 $element-indent; // 들여쓰기
  vertical-align: middle;

  &::placeholder {
    color: $element-placeholder-font-color;
  }

  //readonly와 disabled일 때 placeholder감추기
  &:read-only::placeholder,
  &:disabled::placeholder {
    color: transparent;
  }

  &:not(:disabled),
  &:not(:read-only) {
    &:hover {
      outline: 0;
      @include border($element-hover-border-width, solid, $element-hover-border-color, all);
    }

    &:focus {
      outline: 0;
      @include border($element-focus-border-width, solid, $element-focus-border-color, all);
      @include boxShadow(0, 0, 0.125rem, 0, $element-focus-shadow-color); // 2px

      &[data-error] {
        @include border($validation-error-border-width, solid, $validation-error-border-color, all);
        @include boxShadow(0, 0, 0, 0, $element-bg-color);
      }
      &[data-success] {
        @include border($validation-success-border-width, solid, $validation-success-border-color, all);
        @include boxShadow(0, 0, 0, 0, $element-bg-color);
      }
    }

    &:active {
      outline: 0;
      @include border($element-active-border-width, solid, $element-active-border-color, all);
    }
  }

  &:read-only:not(:disabled):not(.tagify) {
    background-color: $element-readonly-bg-color;
    background-image: none;
    border: none;
    @include border($element-readonly-border-width, solid, $element-readonly-border-color, bottom);
    @include borderRadius(0);
    cursor: default;
    width: 100%;

    &:hover,
    &:focus {
      @include border($element-readonly-border-width, solid, $element-readonly-border-color, bottom);
      @include resetBoxShadow();
    }
  }

  &:disabled {
    color: $element-disabled-font-color;
    background-color: $element-disabled-bg-color;
    @include border($element-disabled-border-width, solid, $element-disabled-border-color, all);
    pointer-events: none;
    cursor: default;
  }

  &.error {
    @include border($validation-error-border-width, solid, $validation-error-border-color !important, all);
  }

  &.success {
    @include border($validation-success-border-width, solid, $validation-success-border-color !important, all);
  }

  &-clear {
    @include relative();
    display: inline-block;

    input { width: 100%; }

    .z-icon {
      -webkit-print-color-adjust:exact;
      &.i-clear {
        @include absolute($right: $input-clear-right);
        padding: 1.125rem 0.875rem; // 18px 14px
        background: $input-bg-icon-color;
        cursor: pointer;
      }
    }
  }

  // z-input with background img
  &.i-search {
    @include backgroundImage($icon-folder-path + 'icon_search.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &.i-date-picker {
    @include backgroundImage($icon-folder-path + 'dateTimePicker/icon_date_picker.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &.i-time-picker {
    @include backgroundImage($icon-folder-path + 'dateTimePicker/icon_time_picker.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &.i-datetime-picker {
    @include backgroundImage($icon-folder-path + 'dateTimePicker/icon_date_time_picker.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &.i-px {
    @include backgroundImage($icon-folder-path + 'icon_px.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &.i-mb {
    @include backgroundImage($icon-folder-path + 'icon_mb.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
  }

  &-button {
    @include relative();
    height: 2.25rem; // 36px

    .z-input {
      flex-basis: 100%;
    }

    .z-button-search {
      margin-left: 1rem; // 16px
      @include borderRadius(0.25rem);

      &:focus,
      &:hover,
      &:active {
        z-index: $z-index-event;
      }
    }

    .z-icon {
      &.i-clear {
        @include absolute($right: calc(#{$input-clear-right} + 5rem));
        padding: 1.125rem 0.875rem; // 18px 14px
        background: $element-icon-color;
        cursor: pointer;
      }
    }
  }

  // input type=number 증감 화살표 숨기기
  /* Chrome, Safari, Edge */
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  /* Firefox */
  &[type=number] {
    -moz-appearance: textfield;
  }
}

// textarea
// overlay scroll로 인한 div와의 중복 디자인을 방지하기 위해
// outer div에 대해 예외 처리
.z-textarea {
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: $element-line-height;
  color: $element-font-color;
  background-color: $element-bg-color;
  padding: 0.5rem $element-indent; // 들여쓰기 8px 16px
  &:not(.os-textarea) {
    @include border($element-border-width, solid, $element-border-color, all);
    @include borderRadius($element-border-radius);
  }

  &::placeholder {
    color: $element-placeholder-font-color;
  }

  //readonly와 disabled일 때 placeholder감추기
  &:read-only::placeholder,
  &:disabled::placeholder {
    color: transparent;
  }

  &:not(:disabled),
  &:not(:read-only) {
    &:focus {
      outline: 0;
      @include border($element-focus-border-width, solid, $element-focus-border-color, all);
      @include boxShadow(0, 0, 0.125rem, 0, $element-focus-shadow-color); // 2px
    }

    &:hover {
      outline: 0;
      @include border($element-hover-border-width, solid, $element-hover-border-color, all);
    }

    &:active {
      outline: 0;
      @include border($element-active-border-width, solid, $element-active-border-color, all);
    }
  }

  &:read-only:not(:disabled):not(.os-host-textarea) {
    background-color: $element-readonly-bg-color;
    border: none !important;
    @include border($element-readonly-border-width, solid, $element-readonly-border-color !important, left);
    @include borderRadius(0);
    cursor: default;
    resize: none;

    &:hover,
    &:focus {
      @include border($element-readonly-border-width, solid, $element-readonly-border-color, all);
      @include resetBoxShadow();
    }
  }

  &:disabled {
    color: $element-disabled-font-color;
    background-color: $element-disabled-bg-color;
    @include border($element-disabled-border-width, solid, $element-disabled-border-color, all);
    pointer-events: none;
    cursor: default;
  }

  &.error {
    @include border($validation-error-border-width, solid, $validation-error-border-color !important, all);
  }

  &.success {
    @include border($validation-success-border-width, solid, $validation-success-border-color !important, all);
  }
}
// os-div 작업
div.z-textarea {
  &-readonly {
    border-color: transparent !important;
  }
}

// switch
.z-switch {
  @include relative();
  height: 1.125rem; // 18px
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: $element-line-height;
  color: $element-font-color;
  outline: none;

  .z-label {
    display: inline-block;
    height: 1.125rem; // 18px
    margin-left: 3rem; // 48px
    cursor: pointer;
  }

  input[type=checkbox] {
    display: none;
    // 스위치 버튼
    + span {
      @include absolute(0, 0, 0, 0);
      width: 2.25rem; // 36px
      height: 0.75rem; // 12px
      background-color: $switch-off-track-color;
      @include border($switch-off-track-border-width, solid, $switch-off-track-border-color, all); // 1px
      @include borderRadius(2.5rem); // 40px
      cursor: pointer;
      @include transition(.4s);
      // 동그라미
      &::before {
        content: '';
        @include absolute($top: -0.25rem, $left: -0.0625rem); // -4px -1px
        width: 1.125rem; // 18px
        height: 1.125rem; // 18px
        background-color: $switch-thumb-color;
        @include border($switch-thumb-border-width, solid, $switch-thumb-border-color, all); // 1px
        @include borderRadius(50%);
        @include boxShadow(0, 0, 0.125rem, 0, $switch-thumb-shadow-color); // 2px
      }
    }
    &:checked {
      + span {
        background-color: $switch-on-track-color;
        @include border($switch-on-track-border-width, solid, $switch-on-track-border-color, all); // 1px
        &::before {
          @include translate(1.3125rem, 0); // 21px
        }
      }
    }
    &:disabled {
      + span {
        background-color: $switch-disabled-track-color;
        @include border($switch-disabled-track-border-width, solid, $switch-disabled-track-border-color, all); // 1px
        &::before {
          background-color: $switch-disabled-thumb-bg-color;
        }
      }
    }
  }
}

// select
select {
  width: inherit;
  height: 2.25rem; // 36px
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: $element-line-height;
  color: $element-font-color;
  background-color: $element-bg-color;
  @include border($element-border-width, solid, $element-border-color, all);
  @include borderRadius(0.0625rem);
  padding: 0 $element-indent;
  vertical-align: middle;
  -moz-appearance: none; /* Firefox */
  -webkit-appearance: none; /* Safari and Chrome */
  appearance: none;
}
/**
 Designed select
   1) select 태그를 사용하면서 initDesignedSelectTag 함수를 호출하면 아래 디자인을 적용할 수 있음.
   2) z-select 클래스를 가진 div 로 select 태그를 감싸고 디자인된 div 를 제공
   3) 내부에는 2개의 영역으로 구성되며 아래와 같은 클래스명으로 구분된다.
     - z-select-box : select 태그를 대신해서 보여지는 부분
     - z-select-options : z-select-box 클릭 시 보여지는 option 리스트 부분
*/
.z-select {
  display: inline-block;
  @include relative();
  width: 100%;
  height: 2.25rem; // 36px
  vertical-align: middle;

  select.readonly {
    visibility: hidden;
  }

  // select 태그를 대신해서 보여지는 부분
  .z-select-box {
    align-items: center;
    @include absolute(0, 0, 0, 0);
    width: 100%;
    padding: 0.5625rem 1.75rem 0.5625rem 1rem; // 9px 28px 9px 16px
    font-family: $element-font-family;
    font-size: $element-font-size;
    font-weight: $element-font-weight;
    line-height: $element-line-height;
    color: $element-font-color;
    background-color: $element-bg-color;
    cursor: pointer;
    @include borderRadius(0.125rem); // 2px
    @include border($element-border-width, solid, $element-border-color, all);
    @include ellipsis(block);

    &:not(.readonly) {

      &:hover {
        outline: 0;
        @include border($element-hover-border-width, solid, $element-hover-border-color, all);
      }

      &:focus {
        outline: 0;
        @include border($element-focus-border-width, solid, $element-focus-border-color, all);
        @include boxShadow(0, 0, 0.125rem, 0, $element-focus-shadow-color); // 2px
      }

      &.active {
        outline: 0;
        @include border($element-active-border-width, solid, $element-active-border-color, all);
        // 열렸을때 출력되는 화살표 아이콘
        .z-icon {
          &.i-arrow-right {
            @include rotate(-90);
          }
        }

        + .z-select-options {
          display: block;
        }
      }

      // 닫혔을때 출력되는 화살표 아이콘
      .z-icon {
        pointer-events: none;

        &.i-arrow-right {
          @include absolute($right: 0.5rem); // 8px
          margin-top: -0.1875rem; //3px
          background: $element-icon-color;
          @include rotate(90);
        }
      }
    }

    // readonly
    &.readonly {
      background-color: $element-readonly-bg-color;
      border: none;
      @include border($element-readonly-border-width, solid, $element-readonly-border-color, bottom);
      @include borderRadius(0);
      cursor: default;
    }

    .z-select-box-label {
      height: auto;
      width: 100%;
      background-color: transparent;
      padding: 0;
      border: none !important;
      vertical-align: unset;
      pointer-events: none;

      &:hover,
      &:focus {
        border: none;
        @include resetBoxShadow();
      }
    }

    // disabled
    &.disabled-select {
      color: $element-disabled-font-color;
      background-color: $element-disabled-bg-color;
      @include border($element-disabled-border-width, solid, $element-disabled-border-color, all);
      pointer-events: none;
      cursor: default;

      .z-select-box-label {
        color: $element-disabled-font-color;
        background-color: $element-disabled-bg-color;
      }
    }
  }

  // z-select-box 클릭 시 보여지는 option 리스트 부분
  .z-select-options {
    display: none;
    list-style: none;
    @include absolute(calc(100% + 0.25rem), 0, null, 0);  // 4px
    z-index: $z-index-between-alert-modal;
    padding: 0.25rem 0; // 4px
    margin: 0;
    @include border($element-border-width, solid, $element-border-color, all);
    background-color: $element-bg-color;
    max-height: 25rem; // 400px
    color: $element-font-color;
    outline: 0;
    overflow: auto;
    @include borderRadius(0.125rem); // 2px
    @include boxShadow(0, 0, 0.125rem, 0, $element-shadow-color);
    li {
      padding: 0.5625rem 1.75rem 0.5625rem 0; // 9px 28px 9px 16px
      margin: 0 0.3125rem; // 5px
      text-indent: 0.6875rem; // 11px
      align-items: center;
      font-family: inherit;
      font-size: $element-font-size;
      font-weight: $element-font-weight;
      line-height: $element-line-height;
      @include ellipsis(block);

      &:hover { background: $element-hover-bg-color; }

      &[rel='hide'] { display: none; }
    }
    .selected {
      color: $element-checked-color;

      // 선택된 옵션에 표시되는 체크 아이콘
      &:after {
        @include absolute($right: 0.9375rem); // 15px
        width: 0.625rem; // 10px
        height: 0.438rem; // 7px
        padding-top: 0.9375rem; //15px
        @include backgroundImage($icon-folder-path + 'icon_select_check.svg', auto, no-repeat, center, center);
        content: '';
      }
    }
  }
}

// slider
.z-slider {
  min-height: 1.375rem; // 22px
  .z-range {
    --range-fill-color: #{$slider-range-fill-color};
    --range-location: 100%;
    -webkit-appearance: none;
    appearance: none;
    width : 75%;
    max-width: 15rem; // 240px
    height: 0.375rem; // 6px
    padding: 0;
    @include borderRadius(0.25rem); // 4px
    background: linear-gradient(to right, var(--range-fill-color) 0%, var(--range-fill-color) var(--range-location), $slider-range-bg-color var(--range-location), $slider-range-bg-color 100%);
    outline: 0;

    &:disabled {
      --range-fill-color: #{$slider-range-disabled-fill-color};
      background: linear-gradient(to right, var(--range-fill-color) 0%, var(--range-fill-color) var(--range-location), $slider-range-bg-color var(--range-location), $slider-range-bg-color 100%);
    }

    // Thumb (= round button)
    &::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      @include thumb($slider-thumb-size, $slider-thumb-size, 0.0625rem solid $slider-thumb-border-color, 50%, $slider-thumb-bg-color); // 18px 18px
      @include boxShadow(0, 0, 0.125rem, 0, $slider-thumb-shadow-color); // 2px
      &:hover {
        border-color: $slider-thumb-hover-border-color;
        background-color: $slider-thumb-hover-bg-color;
      }
      &:focus {
        border-color: $slider-thumb-focus-border-color;
        @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
      }
      &:active {
        border-color: $slider-thumb-active-border-color;
        background-color: $slider-thumb-active-bg-color;
      }
      &:disabled {
        border-color: $slider-thumb-disabled-border-color;
        background-color: $slider-thumb-disabled-bg-color;
      }
    }

    // firefox
    &::-moz-range-thumb { // 동그라미
      @include thumb($slider-thumb-size, $slider-thumb-size, 0.0625rem solid $slider-thumb-border-color, 50%, $slider-thumb-bg-color); // 18px 18px
      @include boxShadow(0, 0, 0.125rem, 0, $slider-thumb-shadow-color); // 2px
      &:hover {
        border-color: $slider-thumb-hover-border-color;
        background-color: $blue100;
      }
      &:focus {
        border-color: $slider-thumb-focus-border-color;
        @include boxShadow(0, 0, 0.125rem, 0, $slider-thumb-focus-border-color); // 2px
      }
      &:active {
        border-color: $slider-thumb-active-border-color;
        background-color: $slider-thumb-active-bg-color;
      }
      &:disabled {
        border-color: $slider-thumb-disabled-border-color;
        background-color: $slider-thumb-disabled-bg-color;
      }
    }
  }
  .z-input {
    width: 23%;
    text-align: center;
    margin-left: 2%;
    &:read-only:not(:disabled) {
      width: 23%;
      @include border($element-border-width, solid, $element-border-color, all);
      @include borderRadius(0.125rem); // 2px
    }
  }
}

// checkbox
.z-checkbox {
  margin-right: 0.5rem; // 8px
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: $element-line-height;
  color: $element-font-color;
  outline: none;

  > span:first-of-type {
    padding-right: $checkbox-indent;
  }

  input[type=checkbox] {
    display: none;
    // 체크 박스 span
    + span {
      @include relative();
      &::before {
        content: '';
        display: inline-block;
        width: $checkbox-size;
        height: $checkbox-size;
        margin-bottom: 0.125rem; // 2px
        @include border($element-border-width, solid, $element-border-color, all);
        @include borderRadius(0.125rem); // 2px
        background-color: $element-bg-color;
        vertical-align: middle;
      }
    }
    &:checked {
      + span {
        // 체크 기호
        &::after {
          content: '';
          @include absolute($top: 0.125rem, $left: 0); // 2px
          width: 0.75rem; // 12px
          height: 0.375rem; // 6px
          @include border(0.125rem, solid, $element-checked-color, bottom, top);
          @include border(0.125rem, solid, $element-checked-color, left, right);
          @include borderRadius(0.125rem); // 2px
          @include transform(translate(0.1875rem, 0.25rem) rotate(-45deg)); // 3px, 4px
        }
      }
    }

    &:not(:disabled),
    &:not(.readonly) {
      + span { cursor: pointer; }
      ~ .z-label { cursor: pointer; }

      &:hover {
        + span {
          &::before {
            border-color: $element-hover-border-color;
            background-color: $element-hover-bg-color;
          }
        }
      }
    }
    // 체크박스는 readonly 속성이 없기 때문에 readonly일 경우 disabled 디자인과 동일하게 처리
    &:disabled,
    &.readonly {
      + span {
        &::before {
          background-color: $element-disabled-bg-color;
        }
        &::after {
          border-color: $element-disabled-font-color;
        }
      }
      ~ .z-label {
        color: $element-disabled-font-color;
      }
    }

    &.error {
      + span {
        &::before {
          @include border($validation-error-border-width, solid, $validation-error-border-color !important, all);
        }
      }
    }
  }

  &:focus {
    input[type=checkbox]:not(:disabled),
    input[type=checkbox]:not(.readonly) {
      + span {
        &:before {
          border-color: $element-focus-border-color;
          @include boxShadow(0, 0, 0.0625rem, 0, $element-focus-shadow-color);
        }
      }
    }
  }
  &:active {
    input[type=checkbox]:not(:disabled),
    input[type=checkbox]:not(.readonly) {
      + span {
        &:before {
          border-color: $element-active-border-color;
          background-color: $element-active-bg-color;
        }
        &:after {
          border-color: $element-checked-active-color;
        }
      }
    }
  }

  // readonly, disabled 클래스 설정시 라벨의 동작을 막음
  &.readonly,
  &.disabled {
    pointer-events: none;
  }
}

// radio button
.z-radio {
  @include relative();
  margin-right: 0.5rem; // 8px
  font-family: $element-font-family;
  font-size: $element-font-size;
  font-weight: $element-font-weight;
  line-height: 1.6;
  color: $element-font-color;
  outline: none;

  > span:first-of-type {
    padding-right: $radio-indent;
  }

  input[type=radio] {
    display: none;
    // ⓞ 로 사용될 span
    + span {
      @include relative();

      &::before { // 테두리로 사용되는 큰 원
        content: '';
        @include relative($top: -0.0625rem); // -1px
        display: inline-block;
        width: $radio-border-size;
        height: $radio-border-size;
        background-color: $element-bg-color;
        @include border($element-border-width, solid, $element-border-color, all);
        @include borderRadius(50%);
        vertical-align: middle;
        text-align: center;
      }

      &::after { // 선택시 작은 원
        content: '';
        @include absolute($top: -0.225rem, $left: 0); // top: -3.6px
        width: $radio-inner-size;
        height: $radio-inner-size;
        background-color: transparent;
        @include borderRadius(50%);
      }
    }

    &:not(:disabled),
    &:not(.readonly) {
      + span { cursor: pointer; }
      ~ .z-label { cursor: pointer; }

      &:checked {
        + span {
          &::before {
            border-color: $element-border-color;
          }
          &::after {
            background-color: $element-checked-color;
            @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
          }
        }
      }

      &:hover {
        + span {
          &::before {
            border-color: $element-hover-border-color;
            background-color: $element-hover-bg-color;
          }
        }
      }
    }
    // 라디오버튼은 readonly 속성이 없기 때문에 readonly일 경우 disabled 디자인과 동일하게 처리
    &:disabled,
    &.readonly {
      + span {
        &::before {
          border-color: $element-disabled-border-color;
          background-color: $element-disabled-bg-color;
        }
      }
      ~ .z-label {
        color: $element-disabled-font-color;
      }
      &:checked {
        + span {
          &::after {
            background-color: $element-disabled-font-color;
            @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
          }
        }
      }
    }

    &.error {
      + span {
        &::before {
          @include border($validation-error-border-width, solid, $validation-error-border-color !important, all);
        }
      }
    }
  }

  &:focus {
    input[type=radio]:not(:disabled),
    input[type=radio]:not(.readonly) {
      + span {
        &:before {
          border-color: $element-focus-border-color;

          @include boxShadow(0, 0, 0.125rem, 0, $element-focus-border-color); // 2px
        }
      }
    }
  }
  &:active {
    input[type=radio]:not(:disabled),
    input[type=radio]:not(.readonly) {
      + span {
        &:before {
          border-color: $element-active-border-color;
          background-color: $element-active-bg-color;
        }
        &::after {
          background-color: $element-checked-active-color;
          @include transform(translate(4px, 9px) scale(1)); // 4px, 9px
        }
      }
    }
  }

  // readonly, disabled 클래스 설정시 라벨의 동작을 막음
  &.readonly,
  &.disabled {
    pointer-events: none;
  }
}

.z-view-hover {
  pointer-events: none;
}
