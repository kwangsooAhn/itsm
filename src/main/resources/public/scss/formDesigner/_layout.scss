@import '../template/_layout.scss';

/* 폼 디자이너 팝업 layout
 * form-container - form-header : 상단
 *                - form-component-palette : 컴포넌트 팔레트
 *                - form-main : 폼 메인
 *                             - drawing-board : 실제 컴포넌트들이 그려지는 영역
 *                - form-properties-panel-header: 세부 속성 제목
 *                - form-properties-panel : 세부속성
 */
$component-icon: (
        'default': ('font': $gray600, 'icon': $gray500, 'background': $white, 'border': $gray300),
        'hover': ('font' : $gray600, 'icon': $gray600,  'background': $blue100, 'border': $gray300),
        'focus': ('font': $gray600, 'icon': $gray500, 'background': $white, 'border': $blue600, 'shadow': 0 0 0.125rem $blue600),
        'active': ('font': $blue700, 'icon': $blue700, 'background': $blue100, 'border': $blue400),
        'drag': ('font': $gray800, 'icon': $blue500, 'background': $white, 'border': $gray300, 'shadow': 0 0 0.125rem $gray300),
        'placeholder': ('font': $gray400, 'icon': $gray400, 'background': $neutral200, 'border': $gray300)
);

// 폼 양식
.z-form {
  &-container {
    @include container;
  }
  &-header {
    @include fixedHeader;
    left: 0;
    height: 2.875rem; // 46px;
    font-family: $font-family;
    font-size: $font-size-s;
    font-weight: $font-weight-medium;
    color: $white;;
    background-color: $blue500;
    z-index: 100;
    .i-form-designer {
      width: 12.5rem; // 200px
      padding: 0 0.75rem; // 0 12px
    }
    .z-form-name {
      font-size: $font-size-s;
    }
    .z-form-button-list {
      width: 19.06rem; // 305px

      .z-header-dropdown {
        @include relative();
      }
    }
  }
  &-component-palette {
    @include fixed(2.875rem, null, 0, 0); // 46px
    width: 12.5rem; // 200px
    background-color: $white;
    @include border(0.0625rem, solid, $gray300, right); // 1px
    @include boxShadow(0, 0, 0.125rem, 0, $blue600); // 2px
    overflow: hidden;

  }
  &-main {
    @include fixed(2.875rem, 18.75rem, 0, 0);
    @include scrollbarHidden;
    left: 12.5rem; // 200px
    right: 20rem; // 320px
    background-color: $neutral50;
  }
  &-properties-panel-header {
    @include fixed($top: 2.875rem, $right: 0); // 46px
    width: 20rem; // 320px
    height: 2.5rem; // 40px
    font-size: $font-size-l;
    font-weight: $font-weight-semibold;
    color: $neutral800;
    background-color: $white;
    padding: 0.625rem 0.75rem; // 10px 12px;
  }
  &-properties-panel {
    @include fixed(calc(2.875rem + 2.5rem), 0, 0, null); // 40px
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-content: flex-start;
    justify-content: space-between;
    width: 20rem; // 320px
    background-color: $white;
    overflow-x: hidden;
    overflow-y: auto;
    @include scrollbarHidden;
    &:not(:empty){
      @include border(0.0625rem, solid, $gray300, top);
    }
    & > .property {
      padding: 0 0.75rem;
    }
  }
}
// 아코디언
.z-component-accordion-box {
  .z-component-accordion {
    width: 100%;
    input[type=radio] {
      @include absolute();
      opacity: 0;
      z-index: -1;
    }
    .z-accordion-label {
      height: 40px; // 40px
      font-family: $font-family;
      font-size: $font-size-s;
      font-weight: $font-weight-bold;
      color: $gray800;
      @include border(0.0625rem, solid, $gray300, bottom); // 1px
      padding: 0 12px; // 0 12px
      cursor: pointer;

      .z-icon {
        &.i-arrow-right {
          @include rotate(180);
          @include transformOrigin(50% 50%);
          background: $gray500;
        }
      }
    }
    .z-accordion-content {
      height: 0;
      @include border(0.0625rem, solid, transparent, bottom); // 1px
      overflow: hidden;
      @include transition(all 0.25s ease-out);

      .z-component-icon-box {
        @include relative();
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        width: 100%;
        padding: 0;
        margin: 0;

        .z-component-icon {
          width: 6.188rem; // 99px
          height: 5.625rem; // 90px
          text-align: center;
          padding: 0.625rem 0; // 10px 0
          background-color: map-get($component-icon, 'default', 'background');
          @include border(0.0625rem, solid, map-get($component-icon, 'default', 'border'), all); // 1px
          border-top-color: transparent;
          @if map-get($component-icon, 'default', 'shadow') != null {
            box-shadow: map-get($component-icon, 'default', 'shadow');
          }
          cursor: move;
          outline: none;
          // 홀수
          &:nth-child(odd) {
            @include absolute($top: calc(var(--data-row, 0) * 5.625rem), $left: 0.0625rem); // 90px 1px
            border-left-color: transparent;
          }
          // 짝수
          &:nth-child(even) {
            @include absolute($top: calc(var(--data-row, 0) * 5.625rem), $right: 0); // 90px
            border-left-color: transparent;
            border-right-color: transparent;
          }

          .z-icon { background: map-get($component-icon, 'default', 'icon'); }

          .z-component-name {
            display: block;
            font-family: $font-family;
            font-size: $font-size-xs;
            font-weight: $font-weight-medium;
            color: map-get($component-icon, 'default', 'font');
            padding-top: 0.375rem; // 6px
          }

          &:hover {
            background-color: map-get($component-icon, 'hover', 'background');
            @if map-get($component-icon, 'hover', 'shadow') != null {
              box-shadow: map-get($component-icon, 'hover', 'shadow');
            }
            .z-icon {
              background: map-get($component-icon, 'hover', 'icon');
            }
            .z-component-name {
              color: map-get($component-icon, 'hover', 'font');
            }
          }

          &:focus {
            background-color: map-get($component-icon, 'focus', 'background');;
            border-color: map-get($component-icon, 'focus', 'border');
            z-index: 25;
            @if map-get($component-icon, 'focus', 'shadow') != null {
              box-shadow: map-get($component-icon, 'focus', 'shadow');
            }
            .z-icon {
              background: map-get($component-icon, 'focus', 'icon');
            }
            .z-component-name {
              color: map-get($component-icon, 'focus', 'font');
            }
          }

          // 사용되지 않음 : html5 drag 는 드래그 시작시 active 상태의 디자인을 복사하기 때문에 drag 디자인을 입힘
          &.active {
            border-color: map-get($component-icon, 'active', 'border');
            background-color: map-get($component-icon, 'active', 'background');
            z-index: 25;
            @if map-get($component-icon, 'active', 'shadow') != null {
              box-shadow: map-get($component-icon, 'active', 'shadow');
            }
            .z-icon {
              background: map-get($component-icon, 'active', 'icon');
            }
            .z-component-name {
              font-weight: $font-weight-bold;
              color: map-get($component-icon, 'active', 'font');
            }
          }
          // html5 drag 는 드래그 시작시 active 상태의 디자인을 복사하기 때문에 drag 디자인을 입힘
          // 마우스 클릭시 drag 되는 item (마우스에 따라다니는 item)
          &.drag {
            border-color: map-get($component-icon, 'drag', 'border');
            background-color: map-get($component-icon, 'drag', 'background');
            @if map-get($component-icon, 'drag', 'shadow') != null {
              box-shadow: map-get($component-icon, 'drag', 'shadow');
            }
            .z-icon {
              background: map-get($component-icon, 'drag', 'icon');
            }
            .z-component-name {
              font-weight: $font-weight-bold;
              color: map-get($component-icon, 'drag', 'font');
            }
            .z-component-tooltip {
              display: none;
            }
          }
          // 마우스가 drag 되는 item 영역을 벗어날 경우 컴포넌트 팔레트 item
          &.placeholder {
            border-color: map-get($component-icon, 'placeholder', 'border');
            background-color: map-get($component-icon, 'placeholder', 'background');
            @if map-get($component-icon, 'placeholder', 'shadow') != null {
              box-shadow: map-get($component-icon, 'placeholder', 'shadow');
            }
            .z-icon {
              background: map-get($component-icon, 'placeholder', 'icon');
            }
            .z-component-name {
              font-weight: $font-weight-medium;
              color: map-get($component-icon, 'placeholder', 'font');
            }
          }
        }

        .z-component-template-icon {
          display: inline-block;
          width: 12.5rem; // 200px
          height: 2.5rem; // 40px
          padding: 0.75rem; // 12px
          background-color: map-get($component-icon, 'default', 'background');
          @include border($layout-component-palette-border-width, solid, map-get($component-icon, 'default', 'border'), all); // 1px
          border-top-color: transparent;
          border-right-color: transparent;
          border-left-color: transparent;
          @if map-get($component-icon, 'default', 'shadow') != null {
            box-shadow: map-get($component-icon, 'default', 'shadow');
          }
          cursor: move;
          outline: none;

          .z-icon {
            background: map-get($component-icon, 'default', 'icon');
          }

          .z-component-name {
            width: 8.125rem; // 130px
            height: 1rem; // 16px
            margin: 0 0.3125rem; // 5px
            font-family: $component-icon-font-family;
            font-size: $component-icon-font-size;
            font-weight: $component-icon-font-weight;
            color: map-get($component-icon, 'default', 'font');
          }

          &:hover {
            background-color: map-get($component-icon, 'hover', 'background');
            @if map-get($component-icon, 'hover', 'shadow') != null {
              box-shadow: map-get($component-icon, 'hover', 'shadow');
            }

            .z-icon {
              background: map-get($component-icon, 'hover', 'icon');
            }

            .z-component-name {
              color: map-get($component-icon, 'hover', 'font');
            }
          }

          &:focus {
            background-color: map-get($component-icon, 'focus', 'background');;
            border-color: map-get($component-icon, 'focus', 'border');
            z-index: $z-index-event;
            @if map-get($component-icon, 'focus', 'shadow') != null {
              box-shadow: map-get($component-icon, 'focus', 'shadow');
            }

            .z-icon {
              background: map-get($component-icon, 'focus', 'icon');
            }

            .z-component-name {
              color: map-get($component-icon, 'focus', 'font');
            }
          }

          // 사용되지 않음 : html5 drag 는 드래그 시작시 active 상태의 디자인을 복사하기 때문에 drag 디자인을 입힘
          &.active {
            border-color: map-get($component-icon, 'active', 'border');
            background-color: map-get($component-icon, 'active', 'background');
            z-index: $z-index-event;
            @if map-get($component-icon, 'active', 'shadow') != null {
              box-shadow: map-get($component-icon, 'active', 'shadow');
            }

            .z-icon {
              background: map-get($component-icon, 'active', 'icon');
            }

            .z-component-name {
              font-weight: $font-weight-bold;
              color: map-get($component-icon, 'active', 'font');
            }
          }

          // html5 drag 는 드래그 시작시 active 상태의 디자인을 복사하기 때문에 drag 디자인을 입힘
          // 마우스 클릭시 drag 되는 item (마우스에 따라다니는 item)
          &.drag {
            border-color: map-get($component-icon, 'drag', 'border');
            background-color: map-get($component-icon, 'drag', 'background');
            @if map-get($component-icon, 'drag', 'shadow') != null {
              box-shadow: map-get($component-icon, 'drag', 'shadow');
            }

            .z-icon {
              background: map-get($component-icon, 'drag', 'icon');
            }

            .z-component-name {
              font-weight: $font-weight-bold;
              color: map-get($component-icon, 'drag', 'font');
            }

            .z-component-tooltip {
              display: none;
            }
          }

          // 마우스가 drag 되는 item 영역을 벗어날 경우 컴포넌트 팔레트 item
          &.placeholder {
            border-color: map-get($component-icon, 'placeholder', 'border');
            background-color: map-get($component-icon, 'placeholder', 'background');
            @if map-get($component-icon, 'placeholder', 'shadow') != null {
              box-shadow: map-get($component-icon, 'placeholder', 'shadow');
            }

            .z-icon {
              background: map-get($component-icon, 'placeholder', 'icon');
            }

            .z-component-name {
              font-weight: $component-icon-font-weight;
              color: map-get($component-icon, 'placeholder', 'font');
            }
          }
        }
      }
    }

    input[type=radio]:checked {
      + .z-accordion-label {
        .z-icon {
          &.i-arrow-right {
            @include rotate(90);
          }
        }
      }
      ~ .z-accordion-content {
        height: calc(100vh - (40px * 4) - 2.875rem); // 40px
        border-bottom-color: $gray300;
        overflow-y: auto;
        @include scrollbarHidden;
      }
    }
  }
}

// drawing board
.z-drawing-board {
  .z-drag-ghost {
    opacity: 0.5;
  }
  .z-component-drag-in {
    background-color: $blue100;
    @include border(0.0625rem, dashed, $blue400, all); // 1px
  }
  // drag & drop (폼 내부에 나타나는 item)
  .z-component-icon-drag-in {
    display: inline-block;
    width: 100%;
    height: auto;
    background-color: $blue100;
    @include border(0.0625rem, dashed, $blue400, all); // 1px
    opacity: 0.5;

    .z-icon { display: none; }
    .z-component-name { display: none; }
    .z-component-tooltip {
      border-color: transparent;
      .z-component {
        // 드래그시 사용자 디자인보다 우선 적용
        .z-component-label {
          .z-component-label-text {
            color: $blue400 !important;
          }
        }
        .z-element {
          .z-input,
          .z-textarea,
          .z-select-box {
            color: $blue400 !important;
            border-color: $blue400 !important;
            &::placeholder {
              color: $blue400 !important;
            }
            .z-icon {
              background: $blue400 !important;
            }
            // 날짜 시간 컴포넌트
            &.i-date-picker {
              @include backgroundImage($icon-folder-path + 'designer/palette/icon_date_picker_drag.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
            }

            &.i-time-picker {
              @include backgroundImage($icon-folder-path + 'designer/palette/icon_time_picker_drag.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
            }

            &.i-datetime-picker {
              @include backgroundImage($icon-folder-path + 'designer/palette/icon_date_time_picker_drag.svg', null, no-repeat, calc(100% - 0.4375rem), 50%);
            }
          }
          .z-radio,
          .z-checkbox {
            color: $blue400 !important;
            input[type=radio] + span::before {
              border-color: $blue400 !important;
            }
            input[type=checkbox] + span::before {
              border-color: $blue400 !important;
            }
          }
          // 텍스트 에디터 컴포넌트
          .ql-toolbar.ql-snow,
          .ql-container.ql-snow {
            border-color: $blue400 !important;
            .ql-picker {
              color: $blue400 !important;
            }
            .ql-icon, .ql-transparent, .ql-arrow {
              fill: $blue400 !important;
            }
          }
          // 파일 업로드 컴포넌트
          .dropzone {
            background-color: $white;
            border-color: $blue400 !important;
            .dz-message {
              color: $blue400 !important;
            }
            .z-icon {
              background: $blue400 !important;
            }
          }
          // 커스텀 코드 컴포넌트
          .z-input-button {
            .z-button-clear {
              opacity: 0;
            }
            .z-button-icon {
              color: $blue400 !important;
              background-color: $white;
              border-color: $blue400 !important;
              .z-icon {
                background: $blue400 !important;
              }
            }
          }
          // DR 테이블 컴포넌트 , CI 컴포넌트
          .z-button-list {
            opacity: 0;
          }
          table {
            tr td {
              border-color: $blue400 !important;
            }
            .z-dr-table-header,
            .z-ci-table-header {
              background-color: $blue100 !important;
              td {
                color: $blue400 !important;
              }
            }
            .no-data-found-list {
              color: $blue400 !important;
            }
          }
          // Divider
          .z-divider {
            border-top-style: solid;
            border-top-color : $blue400 !important;
          }
          // 이미지 컴포넌트
          .z-imagebox-placeholder {
            background-color: $white;
            border-color: $blue400 !important;
            color: $blue400 !important;
            .z-icon {
              background: $blue400 !important;
            }
          }
        }
      }
    }
  }

  // 문서 상태에 따라 편집을 막음
  &.edit {
    .z-group-label { pointer-events: none; }
  }
  // 폼 디자이너가 아닐 경우 컴포넌트 테두리 제거
  &:not([data-display="ready"]) {
    .z-component-tooltip {
      border-color: transparent !important;
    }
  }
}

// 저장 정보
.z-save-info {
  min-height: 1.5625rem; // 25px
  line-height: 1.5;
  font-family: $font-family;
  font-size: $font-size-xs;
  font-weight: $font-weight-bold;
  color: $gray500;
  margin: 1.5625rem 0; // 25px 0
}
